# A test suite to check how the output filenames are generated
import os
import shutil

from sinner.BatchProcessingCore import BatchProcessingCore
from sinner.Parameters import Parameters
from tests.constants import result_target_png, target_png, source_jpg, source_target_png, data_targets_dir, result_png, tmp_dir, source_images_result, source_target_mp4, result_target_mp4, state_frames_dir, source_frames, result_frames


def setup():
    #  clean previous results, if exists
    if os.path.exists(tmp_dir):
        shutil.rmtree(tmp_dir)

    if os.path.exists(source_images_result):
        shutil.rmtree(source_images_result)

    if os.path.exists(source_target_png):
        os.remove(source_target_png)

    if os.path.exists(source_target_mp4):
        os.remove(source_target_mp4)

    if os.path.exists(result_target_png):
        os.remove(result_target_png)

    if os.path.exists(result_target_mp4):
        os.remove(result_target_mp4)


def setup_function():
    setup()


# use a fixed name for output
def test_output_names_generation_dummy_fixed() -> None:
    assert os.path.exists(result_png) is False
    params = Parameters(f'--target-path="{target_png}" --source-path="{source_jpg}" --output-path="{result_png}" --frame-processor DummyProcessor')
    core = BatchProcessingCore(parameters=params.parameters)
    assert core._output_file == result_png
    core.run()
    assert os.path.exists(result_png) is True


# generate auto name from a directory
def test_output_names_generation_dummy_dir() -> None:
    assert os.path.exists(result_target_png) is False
    params = Parameters(f'--target-path="{target_png}" --source-path="{source_jpg}" --output-path="{data_targets_dir}" --frame-processor DummyProcessor')
    core = BatchProcessingCore(parameters=params.parameters)
    assert core._output_file == result_target_png  # if a directory passed as the --output-path, it should be converted to an appropriate file path after init
    core.run()
    assert os.path.exists(result_target_png) is True


# generate auto name
def test_output_names_generation_dummy() -> None:
    assert os.path.exists(result_target_png) is False
    params = Parameters(f'--target-path="{target_png}" --source-path="{source_jpg}" --frame-processor DummyProcessor')
    core = BatchProcessingCore(parameters=params.parameters)
    assert core._output_file == result_target_png
    core.run()
    assert os.path.exists(result_target_png) is True


# generate auto name with swapper
def test_output_names_generation_swap() -> None:
    assert os.path.exists(source_target_png) is False
    params = Parameters(f'--target-path="{target_png}" --source-path="{source_jpg}" --frame-processor FaceSwapper')
    core = BatchProcessingCore(parameters=params.parameters)
    assert core._output_file == result_target_png  # the autogenerated default name
    core.run()
    core._output_file = source_target_png  # output path should be changed in FaceSwapper
    assert os.path.exists(source_target_png) is True


# generate auto name from a directory with swapper
def test_output_names_generation_swap_dir() -> None:
    assert os.path.exists(source_target_png) is False
    params = Parameters(f'--target-path="{target_png}" --source-path="{source_jpg}" --output-path="{data_targets_dir}" --frame-processor FaceSwapper')
    core = BatchProcessingCore(parameters=params.parameters)
    assert core._output_file == result_target_png  # the autogenerated default name
    core.run()
    core._output_file = source_target_png  # output path should be changed in FaceSwapper
    assert os.path.exists(source_target_png) is True


# use a fixed name for output with swapper
def test_output_names_generation_swap_fixed() -> None:
    assert os.path.exists(result_png) is False
    params = Parameters(f'--target-path="{target_png}" --source-path="{source_jpg}" --output-path="{result_png}" --frame-processor FaceSwapper')
    core = BatchProcessingCore(parameters=params.parameters)
    assert core._output_file == result_png  # the name is passed and it is fixed
    core.run()
    core._output_file = result_png  # nothing changed in FaceSwapper
    assert os.path.exists(result_png) is True


def test_output_names_for_frames() -> None:
    params = Parameters(f'--target-path="{state_frames_dir}" --source-path="{source_jpg}"  --frame-processor FaceSwapper')
    core = BatchProcessingCore(parameters=params.parameters)
    assert core._output_file == result_frames  # the autogenerated default name
    core.run()
    assert core._output_file == source_frames
    assert os.path.exists(source_frames) is True
